//=============================================================================
//
// モーションクラス [motion.h]
// Author : 小笠原　彪我
//
//=============================================================================
#ifndef _MOTION_H_
#define _MOTION_H_

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "manager.h"

//=============================================================================
// マクロ定義
//=============================================================================
#define MOTION_KEY_MAX 20	// モーションキーの最大数

//*****************************************************************************
// モデルのパーツ
//*****************************************************************************
typedef enum
{
	PARTS_HEAD = 0,	// 頭
	PARTS_BODY,		// 体
	PARTS_UPARM_R,	// 上腕
	PARTS_ARM_R,	// 腕　
	PARTS_HAND_R,	// 手　
	PARTS_UPARM_L,	// 上腕　左
	PARTS_ARM_L,	// 腕　　左
	PARTS_HAND_L,	// 手　　左
	PARTS_THIGTH_R,	// もも
	PARTS_KNEE_R,	// 膝　
	PARTS_FOOT_R,	// 足　
	PARTS_THIGTH_L,	// もも　左
	PARTS_KNEE_L,	// 膝　　左
	PARTS_FOOT_L,	// 足　　左
	PARTS_MAX
} MODEL_PARTS;

//*****************************************************************************
// モーションタイプの列挙　＊モーションをテキストで管理しやすくするため
//*****************************************************************************
typedef enum
{
	MOTION_NONE = 0,	// なし
	MOTION_NEUTRAL,		// ニュートラル
	MOTION_WALK,		// ウォーク
	MOTION_ACTION,		// アクション
	MOTION_JUMP,		// ジャンプ
	MOTION_LANDING,		// ランディング
	MOTION_MAX
} MOTION_TYPE;

//*****************************************************************************
// キーの構造体
//*****************************************************************************
typedef struct
{
	float fPosX;	// 位置X
	float fPosY;	// 位置Y
	float fPosZ;	// 位置Z
	float fRotX;	// 向きX
	float fRotY;	// 向きY
	float fRotZ;	// 向きZ
} KEY;

//*****************************************************************************
// キー情報の構造体
//*****************************************************************************
typedef struct
{
	int		nFrame;				//フレーム
	KEY		aKey[PARTS_MAX];	//各モデルの最大数
} KEY_INFO;

//*****************************************************************************
// モーションの構造体
//*****************************************************************************
typedef struct
{
	bool		bLoop;						// ループするかどうか
	int			nNumMaxKey;					// キーの総数
	KEY_INFO	aKeyInfo[MOTION_KEY_MAX];	// モーションの最大数
} MOTION_INFO;

//*****************************************************************************
// 前方宣言
//*****************************************************************************
class CModel;

//*****************************************************************************
//	モーションクラス
//*****************************************************************************
class CMotion
{
public:
	CMotion();						// コンストラクタ
	~CMotion();						// デストラクタ

	HRESULT Init(void);
	void Uninit(void);				// 終了処理
	void Update(void);				// 更新処理
	void Draw(void);				// 描画処理

	static CMotion *Create(void);	// 生成処理
	void PlayMotion(int nNumModel, CModel **apModel, MOTION_TYPE& motiontypeold, MOTION_TYPE& motiontype);
	void LoadMotion(const char *pMotionFileName);

private:
	CModel						*m_pModel[20];
	MOTION_INFO					m_aMotionInfo[MOTION_MAX];	// モーションの情報
	int							m_nNumKey;			// 現在のモーションキーの数
	int							m_nMotionType;				// モーションの種類
	int							m_nMotionCounter;			// モーションカウンター

};
#endif //!_MOTION_H_