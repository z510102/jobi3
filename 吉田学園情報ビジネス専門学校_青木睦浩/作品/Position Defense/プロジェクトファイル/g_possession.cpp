//=============================================================================
//
// グレネード所持数処理 [g_possession.cpp]
// Author : 青木睦浩
//
//=============================================================================

#include "g_possession.h"
#include "number.h"

//=============================================================================
// コンストラクタ
//=============================================================================
CG_Possession::CG_Possession(int nPriority) : CScene(nPriority)
{
	// 変数をクリア
	memset(&m_pNumber, 0, sizeof(CNumber));
	m_nG_Possession = 0;
	memset(&m_pos, 0, sizeof(D3DXVECTOR3));
}

//=============================================================================
// デストラクタ
//=============================================================================
CG_Possession::~CG_Possession()
{

}

//=============================================================================
// グレネード所持数の生成
//=============================================================================
CG_Possession *CG_Possession::Create(D3DXVECTOR3 pos)
{
	// ポインタ
	CG_Possession *pG_Possession;

	// メモリを確保
	pG_Possession = new CG_Possession (PRIORITY_NUMBER);

	if (pG_Possession != NULL)
	{
		// メンバへ情報を渡す
		pG_Possession->m_size = D3DXVECTOR2(30, 40);

		// 処理へ
		pG_Possession->Init(pos);
	}

	// ポインタを戻り値へ返す
	return pG_Possession;
}

//=============================================================================
// グレネード所持数の初期化処理
//=============================================================================
HRESULT CG_Possession::Init(D3DXVECTOR3 pos)
{
	// ナンバーを生成
	m_pNumber = CNumber::Create(D3DXVECTOR3(pos.x + m_size.x, pos.y, 0.0f), m_size.x, m_size.y);

	// 所持数を決める
	m_nG_Possession = 3;

	return S_OK;
}

//=============================================================================
// グレネード所持数の終了処理
//=============================================================================
void CG_Possession::Uninit(void)
{
	// 頂点バッファの破棄
	if (m_pNumber != NULL)
	{
		m_pNumber->Uninit();
		m_pNumber = NULL;

		// メモリを解放
		delete m_pNumber;
	}

	// オブジェクトの破棄へ
	Release();
}

//=============================================================================
// グレネード所持数の更新処理
//=============================================================================
void CG_Possession::Update(void)
{
	// 桁数分加算されたスコアを計算する
	m_pNumber->SetNumber(m_nG_Possession % (int)pow(10, 1));

	// グレネード所持数が3以上の場合
	if (m_nG_Possession >= 3)
	{
		// 3で停止する
		m_nG_Possession = 3;

		// ナンバーを設定
		m_pNumber->SetNumber(3);

		// 色を設定
		m_pNumber->SetColor(0, 255, 0, 255);
	}

	// グレネード所持数が2以下又は1以上の場合
	if (m_nG_Possession <= 2 && m_nG_Possession >= 1)
	{
		// 色を設定
		m_pNumber->SetColor(255, 255, 255, 255);
	}

	// グレネード所持数が0以下になったら
	if (m_nG_Possession <= 0)
	{
		// 0で停止する
		m_nG_Possession = 0;

		// ナンバーを設定
		m_pNumber->SetNumber(0);

		// 色を設定
		m_pNumber->SetColor(255, 0, 0, 255);
	}
}

//=============================================================================
// グレネード所持数の描画処理
//=============================================================================
void CG_Possession::Draw(void)
{
	// ナンバーの描画処理へ
	m_pNumber->Draw();
}

//=============================================================================
// グレネード所持数の設定処理
//=============================================================================
void CG_Possession::SetG_Ppssession(int nG_Ppssession)
{
	// 引数の値をメンバへ渡す
	m_nG_Possession = nG_Ppssession;

	/*for (int nCnt = 0; nCnt < MAX_LIFE; nCnt++)
	{
	m_apNumber[nCnt]->SetNumber();
	}*/
}

//=============================================================================
// グレネード所持数の減算処理
//=============================================================================
void CG_Possession::SubG_Ppssession(int nValue)
{
	// メンバの値と引数の値を引いてメンバへ渡す
	m_nG_Possession -= nValue;
}

//=============================================================================
// グレネード所持数の取得処理
//=============================================================================
int CG_Possession::GetG_Ppssession(void)
{
	// 戻り値へ渡す
	return m_nG_Possession;
}

//=============================================================================
// グレネード所持数の加算処理
//=============================================================================
void CG_Possession::AddG_Ppssession(int nValue)
{
	// メンバの値と引数の値を足してメンバへ渡す
	m_nG_Possession += nValue;
}
