//=============================================================================
//
// フェード処理 [fade.cpp]
// Author : 青木睦浩
//
//=============================================================================

#include "fade.h"

//=============================================================================
// スコアの生成
//=============================================================================
CFade *CFade::Create(D3DXVECTOR3 pos, D3DXVECTOR2 size, CManager::MODE mode)
{
	// ポインタ
	CFade *pFade;

	// メモリを確保とプライオリティ
	pFade = new CFade(9);

	if (pFade != NULL)
	{
		// それぞれの処理へ
		pFade->Init(pos);
		pFade->SetSize(size.x, size.y);
		pFade->SetPosition(pos);

		// メンバへ情報を渡す
		pFade->m_Mode = mode;
		pFade->m_Color = D3DXCOLOR(0.0f, 0.0f, 0.0f, 0.0f);
		pFade->m_Fade = FADE_OUT;
	}

	// ポインタを戻り値へ返す
	return pFade;
}

//=============================================================================
// コンストラクタ
//=============================================================================
CFade::CFade(int nPriority) : CScene2D(nPriority)
{
	// 変数をクリア
	m_Fade = FADE_NONE;
	m_Color = D3DXCOLOR(0.0f, 0.0f, 0.0f, 1.0f);
}

//=============================================================================
// デストラクタ
//=============================================================================
CFade::~CFade()
{

}

//=============================================================================
// スコアの初期化処理
//=============================================================================
HRESULT CFade::Init(D3DXVECTOR3 pos)
{
	// 色を設定
	m_Color = D3DXCOLOR(0.0f, 0.0f, 0.0f, 1.0f);

	// フェードの種類を設定
	m_Fade = FADE_IN;

	// Scene2Dの初期化処理へ
	CScene2D::Init(pos);

	return S_OK;
}

//=============================================================================
// スコアの終了処理
//=============================================================================
void CFade::Uninit(void)
{
	// Scene2Dの終了処理へ
	CScene2D::Uninit();
}

//=============================================================================
// スコアの更新処理
//=============================================================================
void CFade::Update(void)
{
	if (m_Fade != FADE_NONE)
	{
		if (m_Fade == FADE_IN)
		{
			m_Color.a -= 0.02f;  //フェードインの速度

			if (m_Color.a <= 0.0f)  //徐々に透明化（a は透明度）（0.0は透明度の限界値）
			{
				m_Color.a = 0.0f;
				m_Fade = FADE_NONE;
			}
		}

		else if (m_Fade == FADE_OUT)
		{
			m_Color.a += 0.02f;  //フェードインの速度

			if (m_Color.a >= 1.0f)  //徐々に不透明化（a は透明度）（1.0は透明度の限界値）
			{
				m_Color.a = 1.0f;
				m_Fade = FADE_IN;

				//モードの設定
				CManager::SetMode(m_Mode);
			}
		}

		// Scene2Dの頂点カラー設定へ
		CScene2D::SetColor(m_Color);
	}

	// Scene2Dの更新処理へ
	CScene2D::Update();
}

//=============================================================================
// スコアの描画処理
//=============================================================================
void CFade::Draw(void)
{
	// Scene2Dの描画処理へ
	CScene2D::Draw();
}

//=============================================================================
// フェードの設定処理
//=============================================================================
void CFade::SetFade(CManager::MODE modenext)
{
	m_Fade = FADE_OUT;
	m_Mode = modenext;
	m_Color = D3DXCOLOR(0.0f, 0.0f, 0.0f, 0.0f);
}

//=============================================================================
// フェードの取得処理
//=============================================================================
CFade::FADE CFade::GetFade(void)
{
	// メンバを戻り値へ返す
	return m_Fade;
}
