//=============================================================================
//
// スコア処理 [score.cpp]
// Author : 青木睦浩
//
//=============================================================================

#include "score.h"

//=============================================================================
// コンストラクタ
//=============================================================================
CScore::CScore(int nPriority) : CScene(nPriority)
{
	// 変数をクリア
	memset(&m_apNumber[0], 0, sizeof(CNumber));
	m_nScore = 0;
	memset(&m_size, 0, sizeof(D3DXVECTOR2));
}

//=============================================================================
// デストラクタ
//=============================================================================
CScore::~CScore()
{

}

//=============================================================================
// スコアの生成
//=============================================================================
CScore *CScore::Create(D3DXVECTOR3 pos, D3DXVECTOR2 size)
{
	// ポインタ
	CScore *pNumber;

	// メモリを確保
	pNumber = new CScore(PRIORITY_NUMBER);

	if (pNumber != NULL)
	{
		// メンバへ情報を渡す
		pNumber->m_size = size;

		// Initへ
		pNumber->Init(pos);
	}

	// ポインタを戻り値へ返す
	return pNumber;
}

//=============================================================================
// スコアの初期化処理
//=============================================================================
HRESULT CScore::Init(D3DXVECTOR3 pos)
{
	// MAX_SCOREの数分
	for (int nCnt = 0; nCnt < MAX_SCORE; nCnt++)
	{
		// ナンバーを生成
		m_apNumber[nCnt] = CNumber::Create(D3DXVECTOR3(pos.x + m_size.x * nCnt, pos.y, 0.0f), m_size.x, m_size.y);
	}

	// スコアを設定
	m_nScore = 0;

	return S_OK;
}

//=============================================================================
// スコアの終了処理
//=============================================================================
void CScore::Uninit(void)
{
	// ファイルのポインタ
	FILE *pFile;

	// ファイルを開く（書き込む）
	pFile = fopen("data/SAVE DATA/score.txt", "w");

	if (pFile != NULL)
	{
		// txtにスコアの数値を書き込む
		fprintf(pFile, "%d", m_nScore);

		// ファイルを閉じる
		fclose(pFile);
	}

	// MAX_SCOREの数分
	for (int nCnt = 0; nCnt < MAX_SCORE; nCnt++)
	{
		//頂点バッファの破棄
		if (m_apNumber[nCnt] != NULL)
		{
			m_apNumber[nCnt]->Uninit();
			m_apNumber[nCnt] = NULL;

			delete m_apNumber[nCnt];
		}
	}

	// // オブジェクトの破棄へ
	Release();
}

//=============================================================================
// スコアの更新処理
//=============================================================================
void CScore::Update(void)
{
	//桁数分加算されたスコアを計算する
	m_apNumber[0]->SetNumber(m_nScore / (int)pow(10, 4));
	m_apNumber[1]->SetNumber(m_nScore % (int)pow(10, 4) / (int)pow(10, 3));
	m_apNumber[2]->SetNumber(m_nScore % (int)pow(10, 3) / (int)pow(10, 2));
	m_apNumber[3]->SetNumber(m_nScore % (int)pow(10, 2) / (int)pow(10, 1));
	m_apNumber[4]->SetNumber(m_nScore % (int)pow(10, 1));
}

//=============================================================================
// スコアの描画処理
//=============================================================================
void CScore::Draw(void)
{
	// MAX_SCOREの数分
	for (int nCnt = 0; nCnt < MAX_SCORE; nCnt++)
	{
		// ナンバーの描画処理へ
		m_apNumber[nCnt]->Draw();
	}
}

//=============================================================================
// スコアの設定処理
//=============================================================================
void CScore::SetScore(int nScore)
{
	// 引数をメンバへ渡す
	m_nScore = nScore;

	/*for (int nCnt = 0; nCnt < MAX_SCORE; nCnt++)
	{
	m_apNumber[nCnt]->SetNumber();
	}*/
}

//=============================================================================
// スコアの加算処理
//=============================================================================
void CScore::AddScore(int nValue)
{
	// メンバと引数を足してメンバへ渡す
	m_nScore += nValue;
}

//=============================================================================
// スコアの取得処理
//=============================================================================
int CScore::GetScore(void)
{
	// メンバを戻り値へ返す
	return m_nScore;
}