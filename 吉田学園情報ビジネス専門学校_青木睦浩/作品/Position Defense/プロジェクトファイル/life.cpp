//=============================================================================
//
// ライフ処理 [life.cpp]
// Author : 青木睦浩
//
//=============================================================================

#include "life.h"
#include "number.h"
#include "fade.h"
#include "game.h"

//=============================================================================
// コンストラクタ
//=============================================================================
CLife::CLife(int nPriority) : CScene(nPriority)
{
	// 変数をクリア
	memset(&m_pNumber, 0, sizeof(CNumber));
	m_nLife = 0;
	memset(&m_pos, 0, sizeof(D3DXVECTOR3));
	m_bUse = true;
}

//=============================================================================
// デストラクタ
//=============================================================================
CLife::~CLife()
{

}

//=============================================================================
// ライフの生成
//=============================================================================
CLife *CLife::Create(D3DXVECTOR3 pos)
{
	// ポインタ
	CLife *pLife;

	// メモリを確保
	pLife = new CLife (PRIORITY_NUMBER);

	if (pLife != NULL)
	{
		// メンバへ情報を渡す
		pLife->m_size = D3DXVECTOR2(30, 40);

		// Initへ
		pLife->Init(pos);
	}

	// ポインタを戻り値へ返す
	return pLife;
}

//=============================================================================
// ライフの初期化処理
//=============================================================================
HRESULT CLife::Init(D3DXVECTOR3 pos)
{
	// ナンバーを生成
	m_pNumber = CNumber::Create(D3DXVECTOR3(pos.x + m_size.x, pos.y, 0.0f), m_size.x, m_size.y);

	// ライフの数値を設定
	m_nLife = 3;

	return S_OK;
}

//=============================================================================
// ライフの終了処理
//=============================================================================
void CLife::Uninit(void)
{
	//頂点バッファの破棄
	if (m_pNumber != NULL)
	{
		m_pNumber->Uninit();
		m_pNumber = NULL;

		delete m_pNumber;
	}

	// オブジェクトの破棄処理へ
	Release();
}

//=============================================================================
// ライフの更新処理
//=============================================================================
void CLife::Update(void)
{
	// フェードを取得
	CFade *pFade = CManager::GetFade();

	//桁数分加算されたスコアを計算する
	m_pNumber->SetNumber(m_nLife % (int)pow(10, 1));

	// ライフが9以上の場合
	if (m_nLife >= 9)
	{
		// 9で固定
		m_nLife = 9;

		// 色を設定
		m_pNumber->SetColor(0, 255, 0, 255);

		// ナンバーを設定
		m_pNumber->SetNumber(9);
	}

	// ライフが8以下かつ2以上の場合
	if (m_nLife <= 8 && m_nLife >= 2)
	{
		// 色を設定
		m_pNumber->SetColor(255, 255, 255, 255);
	}

	// ライフが1以下の場合
	if (m_nLife <= 1)
	{
		// 色を設定
		m_pNumber->SetColor(255, 0, 0, 255);
	}

	// ライフが0以下かつ使用している場合
	if (m_nLife <= 0 && m_bUse == true)
	{
		// ゲームオーバー処理へ
		CGame *pGame = NULL;
		pGame->Over();

		// 使用できなくする
		m_bUse = false;
	}

	// 使用していない場合
	else if (m_bUse == false)
	{
		// ライフを0で固定
		m_nLife = 0;

		// ナンバーを設定
		m_pNumber->SetNumber(0);
	}
}

//=============================================================================
// ライフの描画処理
//=============================================================================
void CLife::Draw(void)
{
	// ナンバーの描画処理へ
	m_pNumber->Draw();
}

//=============================================================================
// ライフの設定処理
//=============================================================================
void CLife::SetLife(int nLife)
{
	// 引数をメンバへ渡す
	m_nLife = nLife;

	/*for (int nCnt = 0; nCnt < MAX_LIFE; nCnt++)
	{
	m_apNumber[nCnt]->SetNumber();
	}*/
}

//=============================================================================
// ライフの加算処理
//=============================================================================
void CLife::AddLife(int nValue)
{
	// メンバと引数を足してメンバへ渡す
	m_nLife += nValue;
}

//=============================================================================
// ライフの加算処理
//=============================================================================
void CLife::SubLife(int nValue)
{
	// メンバと引数を引いてメンバへ渡す
	m_nLife -= nValue;
}

//=============================================================================
// ライフの取得処理
//=============================================================================
int CLife::GetLife(void)
{
	// メンバを戻り値へ返す
	return m_nLife;
}